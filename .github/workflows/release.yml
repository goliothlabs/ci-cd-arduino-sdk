name: PlatformIO CI

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GOLIOTH_API_KEY: ${{ secrets.GOLIOTH_API_KEY }}
  GOLIOTH_PROJECT_ID: ${{ secrets.GOLIOTH_PROJECT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Get latest release version number
        id: get_version
        uses: battila7/get-version-action@v2
      - name: Run PlatformIO
        run: VERSION=${{ steps.get_version.outputs.version }} pio run -e esp32
      - name: Install goliothctl
        run: |
          wget https://storage.googleapis.com/golioth-cli-releases/goliothctl/latest/goliothctl_latest_linux_64bit.tar.gz -O /tmp/goliothctl.tar.gz
          tar -xzf /tmp/goliothctl.tar.gz -C ~/golioth/
      - name: Setup goliothctl
        run: |
          ~/golioth/goliothctl login --apiKey ${{ secrets.GOLIOTH_API_KEY }} --projectId ${{ secrets.GOLIOTH_PROJECT_ID }}
      - name: Upload binary to Golioth
        run: |
          ~/golioth/goliothctl dfu artifact create ./.pio/build/esp32/firmware.bin --version ${{ steps.get_version.outputs.version }} --blueprint esp32
